import axios from 'axios';
import environments from '../constants/environments';

const API_BASE_URL = environments.apiBaseUrl;

const getAuthHeader = () => {
    const token = localStorage.getItem('access_token');
    return token ? { Authorization: `Bearer ${token}` } : {};
};

const OrderService = {
    // üìå L·∫•y danh s√°ch ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
    getAll: async () => {
        try {
            const response = await axios.get(`${API_BASE_URL}/orders`, {
                headers: getAuthHeader(),
            });
            return response.data;
        } catch (error) {
            console.error('‚ùå L·ªói l·∫•y danh s√°ch ƒë∆°n h√†ng:', error.response?.data || error.message);
            throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ t·∫£i ƒë∆°n h√†ng');
        }
    },

    // üìå L·∫•y chi ti·∫øt ƒë∆°n h√†ng theo ID
    getById: async (id) => {
        try {
            const response = await axios.get(`${API_BASE_URL}/orders/${id}`, {
                headers: getAuthHeader(),
            });
            return response.data;
        } catch (error) {
            console.error(`‚ùå L·ªói l·∫•y ƒë∆°n h√†ng ID ${id}:`, error.response?.data || error.message);
            throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ l·∫•y chi ti·∫øt ƒë∆°n h√†ng');
        }
    },

    // üìå T·∫°o m·ªõi ƒë∆°n h√†ng
    create: async (orderData) => {
        try {
            const response = await axios.post(`${API_BASE_URL}/orders`, orderData, {
                headers: {
                    'Content-Type': 'application/json',
                    ...getAuthHeader(),
                },
            });
            return response.data;
        } catch (error) {
            console.error('‚ùå L·ªói ƒë·∫∑t h√†ng:', error.response?.data || error.message);
            throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ ƒë·∫∑t h√†ng');
        }
    },

    // ‚úÖ L·∫•y danh s√°ch t·∫•t c·∫£ ƒë∆°n h√†ng (ch·ªâ Admin)
    getAllForAdmin: async () => {
        try {
            const response = await axios.get(`${API_BASE_URL}/admin/orders`, {
                headers: getAuthHeader(),
            });
            return response.data;
        } catch (error) {
            console.error('‚ùå L·ªói l·∫•y danh s√°ch ƒë∆°n h√†ng cho admin:', error.response?.data || error.message);
            throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë∆°n h√†ng (Admin)');
        }
    },

    // ‚úÖ C·∫≠p nh·∫≠t ƒë∆°n h√†ng (Admin)
    update: async (orderId, updateData) => {
        try {
            const response = await axios.put(`${API_BASE_URL}/orders/${orderId}`, updateData, {
                headers: {
                    'Content-Type': 'application/json',
                    ...getAuthHeader(),
                },
            });
            return response.data;
        } catch (error) {
            console.error(`‚ùå L·ªói c·∫≠p nh·∫≠t ƒë∆°n h√†ng ${orderId}:`, error.response?.data || error.message);
            throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ƒë∆°n h√†ng');
        }
    },

    // ‚úÖ Xo√° ƒë∆°n h√†ng (Admin)
    remove: async (orderId) => {
        try {
            const response = await axios.delete(`${API_BASE_URL}/orders/${orderId}`, {
                headers: getAuthHeader(),
            });
            return response.data;
        } catch (error) {
            console.error(`‚ùå L·ªói xo√° ƒë∆°n h√†ng ${orderId}:`, error.response?.data || error.message);
            throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ xo√° ƒë∆°n h√†ng');
        }
    },
};

export default OrderService;
