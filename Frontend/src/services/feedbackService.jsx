import axios from 'axios';
import environments from '../constants/environments';

const API_BASE_URL = environments.apiBaseUrl;

const getAuthHeader = () => {
    const token = localStorage.getItem('access_token');
    return token ? { Authorization: `Bearer ${token}` } : {};
};

const FeedbackService = {
    // üìå Ng∆∞·ªùi d√πng g·ª≠i ph·∫£n h·ªìi (public - kh√¥ng c·∫ßn token)
    create: async (data) => {
        try {
            const response = await axios.post(`${API_BASE_URL}/feedback`, data, {
                headers: {
                    'Content-Type': 'application/json',
                },
            });
            return response.data;
        } catch (error) {
            console.error('‚ùå L·ªói g·ª≠i ph·∫£n h·ªìi:', error.response?.data || error.message);
            throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ g·ª≠i ph·∫£n h·ªìi');
        }
    },

    // üìå Admin: xem t·∫•t c·∫£ ph·∫£n h·ªìi
    getAll: async () => {
        try {
            const response = await axios.get(`${API_BASE_URL}/feedback`, {
                headers: {
                    ...getAuthHeader(),
                    Accept: 'application/json',
                },
            });
            return response.data;
        } catch (error) {
            console.error('‚ùå L·ªói t·∫£i danh s√°ch ph·∫£n h·ªìi:', error.response?.data || error.message);
            throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ t·∫£i ph·∫£n h·ªìi');
        }
    },

    // üìå Admin: xem chi ti·∫øt ph·∫£n h·ªìi
    getById: async (id) => {
        try {
            const response = await axios.get(`${API_BASE_URL}/feedback/${id}`, {
                headers: getAuthHeader(),
            });
            return response.data;
        } catch (error) {
            console.error(`‚ùå L·ªói l·∫•y ph·∫£n h·ªìi ID ${id}:`, error.response?.data || error.message);
            throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ph·∫£n h·ªìi');
        }
    },

    // üìå Admin: xo√° ph·∫£n h·ªìi
    delete: async (id) => {
        try {
            const response = await axios.delete(`${API_BASE_URL}/feedback/${id}`, {
                headers: getAuthHeader(),
            });
            return response.data;
        } catch (error) {
            console.error(`‚ùå L·ªói xo√° ph·∫£n h·ªìi ID ${id}:`, error.response?.data || error.message);
            throw new Error(error.response?.data?.message || 'Kh√¥ng th·ªÉ xo√° ph·∫£n h·ªìi');
        }
    },
};

export default FeedbackService;
